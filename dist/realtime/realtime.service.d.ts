import { Socket } from 'socket.io';
export declare class RealtimeService {
    private readonly logger;
    private clients;
    private metricSubscriptions;
    private dashboardRooms;
    private historicalData;
    private alertThresholds;
    constructor();
    addClient(client: Socket): void;
    removeClient(client: Socket): void;
    joinDashboard(client: Socket, dashboardId: string): void;
    leaveDashboard(client: Socket, dashboardId: string): void;
    private initializeThresholds;
    private initializeHistoricalData;
    subscribeToMetrics(client: Socket, metrics: string[]): void;
    unsubscribeFromMetrics(client: Socket, metrics: string[]): void;
    generateRealTimeData(): Promise<void>;
    generateChartData(): void;
    private generateAlerts;
    private getRandomAlertMessage;
    private getSystemHealth;
    private generateSalesTrendData;
    private generateUserActivityData;
    private generateRevenueByCategoryData;
    private broadcastToAllClients;
    getConnectedClientsCount(): number;
    getClientsByMetric(metric: string): string[];
    private generateRealisticMetric;
    private calculateMetricTrend;
    private storeHistoricalData;
    private cacheRealtimeData;
    private generateIntelligentAlerts;
    private getCurrentMetrics;
    private getAlertMessage;
    private calculateAlertSeverity;
    private generateTrendAlerts;
    private getAdvancedSystemHealth;
    private calculateTrends;
    private generatePredictions;
    private broadcastToDashboardRooms;
    getRealtimeData(): Promise<any>;
    getHistoricalData(metric: string, hours?: number): Promise<any[]>;
    getDashboardAnalytics(dashboardId: string): Promise<any>;
}
